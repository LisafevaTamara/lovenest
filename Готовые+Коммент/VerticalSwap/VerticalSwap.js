function give_num(h1){  // функция для нахождения номера буквы в алфавите
    let alf = ['а','б','в','г','д','е','ж','з', // задаем алфавит
                'и','й','к','л','м','н','о','п',
                'р','с','т','у','ф','х','ц','ч',
                'ш','щ','ъ','ы','ь','э','ю','я'];
    for (let i = 0; i<alf.length; i++){     // цикл повторяющийся такое количество раз, равное длинне алфавита
        if (h1 == alf[i]){                  // находится номер буквы в алфавите (счет с нуля)
            h1 = i+1;                       // присваемаем номер буквы в алфавите (счет с единицы)
            return h1;                      // возвращаем полученное строкой выше
        }
    
    }
    

}



function built_table(key,text){ // Этап 1   функция создания таблицы
    let alf = "абвгдежзиклмнопрстуфхцчшщыьэюя";     // алфавит
    var matr = [];      // объявляем пустой массив  (Сама матрица)
    var mass = []       // объявляем еще пустой массив
    var pod_matr = [];  // объявляем ещё один пустой массив (Строка матрицы)
    let num = 7;
    for (let i = 0; i<key.length; i++){     // цикл повторяющийся такое количество раз, равное длинне ключа
        pod_matr.push('');                  // запалняем заготовку строки пустышками
        
    }
    for(let i = 0;i<key.length;i++){        // цикл повторяющийся такое количество раз, равное длинне ключа
        mass.push(give_num(key[i]));        // заполняем массив номерами букв ключа в алфавите
    }
    matr.push(mass)                         // начинаем заполнять матрицу, первой строкой будут номера букв ключа (номера в алфавите)
    let columns = Math.floor(text.length/key.length);   // счтаем количество строк необходимых для записи текста (с округлением) 

    if(columns < (text.length/key.length)){ // если количество строк (округленное) меньше неокругленного
        columns++;                          // добовляем ещё одну строку
    }

    for(let i =0; i<columns; i++){          // цикл повторяющийся такое количество раз, равное количеству строк
        matr.push(Array.from(pod_matr))     // заполняем матрицу пустыми строками (нужного размера
    }
    return matr;    // возвращаем матрицу
}

//built_table('абзгянп','ктообжегсяя');


function insert_text(text,key){ // Этап 2    записываем текст в матрицу, созданную в функции выше
    var matr = built_table(key,text);      //вызываем функцию по созданию матрицы
    let count = 0; // во избежании ещё одного цикла, создаем переменную, для прохода по всему тексту
    let x = 1;     // переменная для прохода по всем строкам матрицы
    let info = ((key.length * (matr.length-1)) - text.length);  // нужно было для отладки
    for(let i = 1;i<matr.length; i++){                          // цикл повторяющийся такое количество раз, равное длинне матрицы
        for(let j = 0; j<matr[x].length;j++){                   // цикл повторяющийся такое количество раз, равное длинне строки
            if(count==text.length){                             // если count равен длинне текста, то завершаем работу функции (текст закончился)
                
                return matr;                                    // возвращаем матрицу (заполненную)
            }
            matr[i][j] = text[count];                           // заполнение строки текстом
            count++;                                            // увеличиваем count на 1

        }
        x++;                                                    // увеличиваем x на 1
    }
    
    console.log(matr[0])
    console.log(matr[1])
    console.log(matr[2])

    return matr;
}





function shift(){ //Этап 4 Главная функция

    let text = document.getElementById('shiftrid').value;                                   // получаем текст из интерфейса
    let key = document.getElementById('keyid').value;                                       // получаем ключ из интерфейса
    let code = document.querySelector("input[type='radio'][name=matrrad]:checked").value;   // получаем выбранное значение encode/decode
    let vvod = document.getElementById('divmatr');                                          // Получаем координаты пространства, в которое будет вставлен зашифрованный текст
    
    text = text.toLowerCase()               // переводит весь полученный текст в нижний регистр

    while(text.indexOf('.') != -1){         // цикл пока в тексте ещё есть точки
        text = text.replace('.','тчкф');    // замена найденной точки на 'тчкф'
    }

    while(text.indexOf(',') != -1){         // цикл пока в тексте ещё есть запятые
        text = text.replace(',','зптф');    // замена найденной запятые на 'зптф'
    }

    while(text.indexOf('-') != -1){         // цикл пока в тексте ещё есть тире
        text = text.replace('-','трф');     // замена найденной тире на 'трф'
    }

    while(text.indexOf('–') != -1){         // цикл пока в тексте ещё есть тире ( вторая вариация этого символа)
        text = text.replace('–','трф');     // замена найденной тире на 'трф'
    }

    while(text.indexOf(' ') != -1){         // цикл пока в тексте ещё есть пробел
        text = text.replace(' ','прбф');    // замена найденной пробелы на 'прбф'
    }

    // while(text.indexOf(' ') != -1){
    //     text = text.replace(' ','');
    // }
    let textnew = '';                       // переменная для записи результата
    var matr = insert_text(text,key);       // создаем и заполняем матрицу
    let count = 0;                          // переменная для расшифровки
    var matrnew = built_table(key,text);    // создаем таблицу для процесса зашифрования или расшифрования
    if(code == 'encode'){                   // проверка на действие (в даннос случае это зашифровка, выбран 'encode')
        while(true){                        // бесконечный цикл (прирывается только действием)
            let min = Math.min.apply(null, matr[0]);    // находим самую маленькую букву ключа (номер в алфавите)
            if (min == 999){                // далее, мы передадим переменной созданной выше значение 999, чтобы она про следующем цикле не попалась снова
                                            // так вот, если минимальное число это 999, знаяит таблица заполненна полностью
                break;                      // прирываем цикл
            }
            let index = matr[0].indexOf(min);  // находим номер столбца
            matr[0][index] = 999;              // элементу, взятому раньше присваиваем значение 999, чтобы он не попался снова 
            let j = index;                     // для удобства просваиваем индекс переменной j
            for(let i = 1; i<matr.length; i++ ){    // цикл повторяющийся такое количество раз, равное длинне матрицы
                if(matr[i][j]== ''){                // если элемент матрицы, взятый по указанным координатам пустой
                    continue;                       // то пропускаем его
                }   
                textnew += matr[i][j];              // записываем выбранный элемент массива (по координатам) в результам
            }

        }
        console.log(textnew);
        vvod.innerHTML=textnew;                      // выводим результат в интерфейс
    }
    if(code=='decode'){                     // проверка на действие (в даннос случае это расшифровка, выбран 'decode')
        while(true){                        // бесконечный цикл (прирывается только действием)
            let min = Math.min.apply(null, matrnew[0]); // находим самую маленькую букву ключа (номер в алфавите)
            let index = matrnew[0].indexOf(min);        // находим номер столбца
            matrnew[0][index] = 999;                    // элементу, взятому раньше присваиваем значение 999, чтобы он не попался снова
            let j = index;                              // для удобства просваиваем индекс переменной j
            for(let i = 1;i<(matr.length);i++){         // цикл повторяющийся такое количество раз, равное длинне матрицы
                if(count == text.length){               // если count равен длинне текста, то прерываем цикл (весь текст расшифрован)
                    break;
                }
                if(matr[i][j]== ''){                    // если элемент матрицы, взятый по указанным координатам пустой
                    continue;                           // то пропускаем его
                }
                matrnew[i][j]=text[count];              // матрице, по указанным координатам 
                count++;                                // увеличиваем count на 1
            }
            if(count == text.length){                   // если count равен длинне текста, прерываем цикл
                break;                  
            };
        };

        for(let i= 1; i<matrnew.length; i++ ){          // цикл повторяющийся такое количество раз, равное длинне матрицы
            console.log(matrnew[i])                     // выводим в консоль строку матрицы
        }
        let textnew = '';
        for(let i = 1; i<matrnew.length;i++){           // цикл повторяющийся такое количество раз, равное длинне матрицы
            for(let j = 0; j<matrnew[0].length; j++){   // цикл повторяющийся такое количество раз, равное длинне первой строки матрицы
                textnew += matrnew[i][j];               // записываем полученную букву в результат
            }
            
        }
        console.log(textnew)
        while(textnew.indexOf('тчкф') != -1){            // цикл пока в тексте ещё есть 'тчкф'
            textnew = textnew.replace('тчкф','. ');      // замена найденной 'тчкф' на точку "."
        }
        while(textnew.indexOf('прбф') != -1){            // цикл пока в тексте ещё есть 'прбф'
            textnew = textnew.replace('прбф',' ');       // замена найденной 'прбф' на пробел " "
        }
        while(textnew.indexOf('зптф') != -1){            // цикл пока в тексте ещё есть 'зптф'
            textnew = textnew.replace('зптф',', ');      // замена найденной 'зптф' на запятую ","
        }
        while(textnew.indexOf('трф') != -1){             // цикл пока в тексте ещё есть 'трф'
            textnew = textnew.replace('трф','-');        // замена найденной 'трф'на '-'
        }
        vvod.innerHTML=textnew;                          // выводим результат в интерфейс
    }
    
        
    

}

// var matrnew = shift('ожскоеятбг','бета',matr);
//shift('огкбстжяоея','бета','decode');
//огкбстжяоея